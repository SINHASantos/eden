load("@fbcode_macros//build_defs:python_binary.bzl", "python_binary")
load("@fbcode_macros//build_defs:python_library.bzl", "python_library")
load("@fbcode_macros//build_defs:rust_binary.bzl", "rust_binary")
load("@fbcode_macros//build_defs:rust_library.bzl", "rust_library")

oncall("scm_client_infra")

python_library(
    name = "edenfs_config_util",
    srcs = ["edenfs_config_util.py"],
    os_deps = [
        (
            "linux",
            [
                "//gatekeeper/py:client",
                "//libfb/py:employee",
                ":edenfs_qe",
            ],
        ),
    ],
    deps = [
        "//eden/fs/cli/facebook:hostcaps",
    ],
)

python_library(
    name = "edenfs_config_manager_lib",
    srcs = ["edenfs_config_manager_lib.py"],
    deps = [
        "fbsource//third-party/pypi/distro:distro",
        "fbsource//third-party/pypi/pytz:pytz",
        "fbsource//third-party/pypi/requests:requests",
        "fbsource//third-party/pypi/toml:toml",
        "fbsource//xplat/python/interntools:auth",
        "fbsource//xplat/python/x2p:x2p",
        ":edenfs_config_util",
        "//configerator/structs/scm/eden/config:edenfs_config-py3-types",
        "//eden/fs/cli:hostname",
        "//eden/fs/cli:lib",
        "//eden/fs/cli:telemetry",
        "//manifold/clients/python:manifold_client_deprecated",
        "//thrift/lib/py3:common",
        "//thrift/lib/py3:types",
    ],
)

python_library(
    name = "edenfs_qe",
    srcs = ["edenfs_qe.py"],
    compatible_with = [
        "ovr_config//os:linux",
    ],
    deps = [
        "//configerator/structs/qe2/service:qe2_servicev2-py3-clients",
        "//configerator/structs/qe2/service:qe2_servicev2-py3-types",
        "//ondemand:paths",
        "//servicerouter/client/py3:base",
        "//servicerouter/client/py3:get_client",
    ],
)

python_binary(
    name = "edenfs_config_manager",
    srcs = ["edenfs_config_manager.py"],
    main_function = "eden.fs.config.facebook.edenfs_config_manager.main",
    deps = [
        ":edenfs_config_manager_lib",
        ":edenfs_config_util",
        "//eden/fs/cli:lib",
        "//eden/fs/cli:telemetry",
    ],
)

rust_library(
    name = "edenfs_config_manager_lib_rust",
    srcs = ["edenfs_config_manager_lib.rs"],
    crate_root = "edenfs_config_manager_lib.rs",
    os_deps = [
        (
            "linux",
            [
                "fbsource//third-party/rust:sys-info",
                "//common/rust/configerator:configerator_client",
            ],
        ),
    ],
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:chrono",
        "fbsource//third-party/rust:chrono-tz",
        "fbsource//third-party/rust:const_format",
        "fbsource//third-party/rust:hex",
        "fbsource//third-party/rust:md-5",
        "fbsource//third-party/rust:rand",
        "fbsource//third-party/rust:serde_json",
        "fbsource//third-party/rust:tempfile",
        "fbsource//third-party/rust:toml",
        "//common/rust/shed/fbinit:fbinit",
        "//common/rust/shed/hostcaps:hostcaps",
        "//common/rust/shed/hostname:hostname",
        "//configerator/structs/scm/eden/config:edenfs_config-rust",
        "//eden/fs/cli_rs/edenfs-utils:edenfs-utils",
    ],
)

rust_binary(
    name = "edenfs_config_manager_rust",
    srcs = ["edenfs_config_manager.rs"],
    crate_root = "edenfs_config_manager.rs",
    deps = [
        "fbsource//third-party/rust:anyhow",
        "fbsource//third-party/rust:clap",
        ":edenfs_config_manager_lib_rust",
        "//cli/rust/cli:cli",
        "//common/rust/shed/fbinit:fbinit",
    ],
)
